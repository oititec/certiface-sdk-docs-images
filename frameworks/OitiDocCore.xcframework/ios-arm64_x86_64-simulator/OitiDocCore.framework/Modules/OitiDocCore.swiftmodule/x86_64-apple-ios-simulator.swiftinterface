// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OitiDocCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import OitiCommons
import OitiDesignSystem
import OitiDeviceIntelligence
@_exported import OitiDocCore
import OitiMultimedia
import OitiRemote
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims

@_hasMissingDesignatedInitializers final public class DocCoreCaptureCustomizationBuilder {
  @discardableResult
  final public func setBackButtonIcon(_ icon: UIKit.UIImage) -> Self
  @discardableResult
  final public func setBackButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setCloseButtonIcon(_ icon: UIKit.UIImage) -> Self
  @discardableResult
  final public func setCloseButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setFrontIndicatorText(_ text: Swift.String) -> Self
  @discardableResult
  final public func setFrontIndicatorColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setFrontIndicatorFocusedState(withImage image: UIKit.UIImage?, textColor: UIKit.UIColor? = nil, textFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setFrontIndicatorUnfocusedState(withImage image: UIKit.UIImage?, textColor: UIKit.UIColor? = nil, textFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setBackIndicatorText(_ text: Swift.String) -> Self
  @discardableResult
  final public func setBackIndicatorColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setBackIndicatorFocusedState(withImage image: UIKit.UIImage?, textColor: UIKit.UIColor? = nil, textFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setBackIndicatorUnfocusedState(withImage image: UIKit.UIImage?, textColor: UIKit.UIColor? = nil, textFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setInstructionGuideText(forFront frontText: Swift.String?, back backText: Swift.String? = nil, confirmation confirmationText: Swift.String? = nil) -> Self
  @discardableResult
  final public func setInstructionGuideTextColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setInstructionGuideTextFont(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  final public func setCapturePreviewBorderColor(forCaptured capturedColor: UIKit.UIColor?, uncapturedState uncapturedColor: UIKit.UIColor?) -> Self
  @discardableResult
  final public func setBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setCaptureButtonIcon(_ icon: UIKit.UIImage) -> Self
  @discardableResult
  final public func setCaptureButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setBottomSheetColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setBottomSheetCornerRadius(_ radius: CoreFoundation.CGFloat) -> Self
  @discardableResult
  final public func setConfirmationMessage(withText text: Swift.String?, color textColor: UIKit.UIColor? = nil, font textFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryButtonText(_ text: Swift.String, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setConfirmButtonText(_ text: Swift.String, forConfirmationText confirmationText: Swift.String, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setConfirmButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @objc deinit
}
public typealias Environment = OitiRemote.Environment
public protocol DocCoreCallback {
  func onSuccess()
  func onError(_ error: OitiCommons.OitiError)
  func onCancel()
}
@_hasMissingDesignatedInitializers final public class DocCoreSolution : OitiCommons.OitiSolution {
  final public var type: OitiCommons.ServiceType {
    get
  }
  final public var vendor: OitiCommons.ServiceVendor {
    get
  }
  final public var sessionTokenRequired: Swift.Bool {
    get
  }
  convenience public init(ticket: Swift.String, key: Swift.String, tenant: OitiRemote.TenantParameters, environment: OitiDocCore.Environment, callback: any OitiDocCore.DocCoreCallback, customizationBuilder: OitiDocCore.DocCoreCustomizationBuilder? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  final public func configure(with service: OitiCommons.ServiceModel, token: Swift.String) async throws
  #endif
  @_Concurrency.MainActor final public func start(at navigationController: UIKit.UINavigationController)
  @objc deinit
}

@_hasMissingDesignatedInitializers final public class DocCoreResultCustomizationBuilder {
  @discardableResult
  final public func setSuccessBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setErrorBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setRetryBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setSuccesImage(_ image: UIKit.UIImage) -> Self
  @discardableResult
  final public func setErrorImage(_ image: UIKit.UIImage) -> Self
  @discardableResult
  final public func setRetryImage(_ image: UIKit.UIImage) -> Self
  @discardableResult
  final public func setSuccessMessage(_ message: Swift.String, color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setErrorMessage(_ message: Swift.String, color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryMessage(_ message: Swift.String, color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryButtonText(_ text: Swift.String, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryButtonColor(forContent contentColor: UIKit.UIColor?, background backgroundColor: UIKit.UIColor? = nil, border borderColor: UIKit.UIColor? = nil) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DocCoreCustomizationBuilder {
  public static func builder() -> OitiDocCore.DocCoreCustomizationBuilder
  @discardableResult
  final public func customizeInstructionScreen(_ builder: @escaping (_ instructionBuilder: OitiDesignSystem.InstructionCustomizationBuilder) -> OitiDesignSystem.InstructionCustomizationBuilder) -> Self
  @discardableResult
  final public func customizeCaptureScreen(_ builder: @escaping (_ captureBuilder: OitiDocCore.DocCoreCaptureCustomizationBuilder) -> OitiDocCore.DocCoreCaptureCustomizationBuilder) -> Self
  @discardableResult
  final public func customizeLoadingScreen(_ builder: @escaping (_ loadingBuilder: OitiDesignSystem.LoadingCustomizationBuilder) -> OitiDesignSystem.LoadingCustomizationBuilder) -> Self
  @discardableResult
  final public func customizeResultScreen(_ builder: @escaping (_ resultBuilder: OitiDocCore.DocCoreResultCustomizationBuilder) -> OitiDocCore.DocCoreResultCustomizationBuilder) -> Self
  @discardableResult
  final public func customizeCameraPermissionScreen(_ builder: @escaping (_ cameraPermissionBuilder: OitiMultimedia.CameraPermissionCustomizationBuilder) -> OitiMultimedia.CameraPermissionCustomizationBuilder) -> Self
  @objc deinit
}
