// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OitiDeviceIntelligence
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreLocation
import Foundation
@_exported import OitiDeviceIntelligence
import OitiLocal
import OitiRemote
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class DeviceIntelligenceManager {
  public static func session(for sessionIdentifier: Swift.String) -> OitiDeviceIntelligence.DeviceIntelligenceManager
  final public func requestLocation()
  final public func trackEvent(_ event: OitiDeviceIntelligence.EventType)
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  final public func uploadDeviceInfoAndLocation(appKey: Swift.String, ticket: Swift.String? = nil, journeyId: Swift.String? = nil, options: [OitiDeviceIntelligence.PersistenceOption : Swift.String] = [:]) async -> Swift.String?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  final public func uploadDeviceBehaviorData(with appKey: Swift.String, ticket: Swift.String? = nil, journeyId: Swift.String? = nil, options: [OitiDeviceIntelligence.PersistenceOption : Swift.String] = [:]) async -> Swift.String?
  #endif
  @objc deinit
}
extension OitiDeviceIntelligence.DeviceIntelligenceManager : Swift.Hashable {
  public static func == (lhs: OitiDeviceIntelligence.DeviceIntelligenceManager, rhs: OitiDeviceIntelligence.DeviceIntelligenceManager) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
public protocol DebugLoggerProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  func logData(forStep step: Swift.String, errorDetail: OitiDeviceIntelligence.ErrorDetail, provider: Swift.String) async
  #endif
}
@_hasMissingDesignatedInitializers final public class DebugLogger : OitiDeviceIntelligence.DebugLoggerProtocol {
  convenience public init(ticket: Swift.String, environment: OitiRemote.Environment)
  #if compiler(>=5.3) && $AsyncAwait
  final public func logData(forStep step: Swift.String, errorDetail: OitiDeviceIntelligence.ErrorDetail, provider: Swift.String) async
  #endif
  @objc deinit
}
public struct CryptoManager {
  public static func encrypt(_ value: Foundation.NSData, withKey secretKey: Swift.String) -> Swift.String?
  public static func decrypt(_ value: Swift.String, withKey secretKey: Swift.String) -> Foundation.Data?
}
public enum PersistenceOption : Swift.String {
  case index
  case collectionID
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SecurityPayload {
}
public struct SecurityEvent {
}
@_hasMissingDesignatedInitializers public class DLCoordinate {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  @objc deinit
}
public enum EventType : Swift.String, Swift.CaseIterable {
  case STATE_L3_hybridLoadingView
  case STATE_L3_instructionView
  case ACTION_L3_instructionContinueBtn
  case ACTION_L3_instructionBackBtn
  case STATE_L3FT_flow
  case SYSTEM_L3_callbackSuccess
  case SYSTEM_L3_callbackError
  case STATE_L3_permissionView
  case ACTION_L3_permissionVerify
  case LOG_L3_permissionCallback
  case ERROR_L3_callbackError
  case SYSTEM_L3_instructionView
  case STATE_L2_hybridLoadingView
  case STATE_L2_instructionView
  case ACTION_L2_instructionContinueBtn
  case ACTION_L2_instructionBackBtn
  case STATE_L2_livenessView
  case ACTION_L2_livenessStartBtn
  case ACTION_L2_livenessBackBtn
  case ACTION_L2_livenessCloseBtn
  case LOG_L2_stepChallenge
  case LOG_L2_stepProcessImage
  case STATE_L2_loadingView
  case STATE_L2_resultSuccessView
  case STATE_L2_resultErrorView
  case ACTION_L2_resultErrorBtn
  case SYSTEM_L2_callbackSuccess
  case SYSTEM_L2_callbackCancelled
  case SYSTEM_L2_callbackError
  case STATE_L2_permissionView
  case ACTION_L2_permissionBtnVerify
  case ACTION_L2_btnGoToSettingsCameraPermission
  case ACTION_L2_btnCloseDialogCameraPermission
  case SYSTEM_DC_hasTicket
  case STATE_DC_hybridLoadingView
  case STATE_DC_instructionView
  case ACTION_DC_instructionBackBtn
  case ACTION_DC_instructionCNHOption
  case ACTION_DC_instructionRGOption
  case STATE_DC_captureView
  case STATE_DC_takePictureFrontDoc
  case ACTION_DC_takePictureFrontDocBtn
  case ACTION_DC_takePictureFrontDocBackBtn
  case ACTION_DC_takePictureFrontDocCloseBtn
  case STATE_DC_reviewPictureFrontDoc
  case ACTION_DC_reviewPictureFrontDocRefuseBtn
  case ACTION_DC_reviewPictureFrontDocConfirmBtn
  case ACTION_DC_reviewPictureFrontDocBackBtn
  case ACTION_DC_reviewPictureFrontDocCloseBtn
  case STATE_DC_takePictureBackDoc
  case ACTION_DC_takePictureBackDocBtn
  case ACTION_DC_takePictureBackDocBackBtn
  case ACTION_DC_takePictureBackDocCloseBtn
  case STATE_DC_reviewPictureBackDoc
  case ACTION_DC_reviewPictureBackDocRefuseBtn
  case ACTION_DC_reviewPictureBackDocConfirmBtn
  case ACTION_DC_reviewPictureBackDocBackBtn
  case ACTION_DC_reviewPictureBackDocCloseBtn
  case STATE_DC_loadingView
  case STATE_DC_resultSuccessView
  case STATE_DC_resultErrorView
  case STATE_DC_resultRetryView
  case ACTION_DC_resultRetryBtn
  case SYSTEM_DC_callbackSuccess
  case SYSTEM_DC_callbackCancelled
  case SYSTEM_DC_callbackError
  case SYSTEM_DC_hasAppkey
  case SYSTEM_DC_hybridCallbackSuccess
  case SYSTEM_DC_hybridCallbackError
  case ACTION_DC_backBtnPermissionView
  case STATE_DC_permissionView
  case ACTION_DC_btnPermissionVerify
  case ACTION_DC_btnGoToSettingsCameraPermission
  case ACTION_DC_btnCloseDialogCameraPermission
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OitiDeviceIntelligence.EventType]
  public typealias RawValue = Swift.String
  public static var allCases: [OitiDeviceIntelligence.EventType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ErrorDetail {
  public let error: any Swift.Error
  public let fileName: Swift.String
  public let line: Swift.String
  public let stackTrace: Swift.String
  public var description: Swift.String {
    get
  }
  public init(error: any Swift.Error, fileName: Swift.String, line: Swift.Int, stackTrace: [Swift.String])
}
extension OitiDeviceIntelligence.PersistenceOption : Swift.Equatable {}
extension OitiDeviceIntelligence.PersistenceOption : Swift.Hashable {}
extension OitiDeviceIntelligence.PersistenceOption : Swift.RawRepresentable {}
extension OitiDeviceIntelligence.EventType : Swift.Equatable {}
extension OitiDeviceIntelligence.EventType : Swift.Hashable {}
extension OitiDeviceIntelligence.EventType : Swift.RawRepresentable {}
