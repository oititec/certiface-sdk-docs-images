// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OitiRemote
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import OitiRemote
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct TenantParameters {
  public let org: Swift.Int
  public let branch: Swift.String
  public let subOrg: Swift.String?
  public let group: Swift.String?
  public init(org: Swift.Int, branch: Swift.String, subOrg: Swift.String?, group: Swift.String?)
  public func fillRequestBuilder(_ requestBuilder: OitiRemote.RequestBuilder)
}
public enum RequestHeader {
  case accept(value: OitiRemote.RequestHeaderValue)
  case cacheControl(value: OitiRemote.RequestHeaderValue)
  case contentType(value: OitiRemote.RequestHeaderValue)
  case accessControlAllowOrigin(value: OitiRemote.RequestHeaderValue)
  case xSubOrg(value: OitiRemote.RequestHeaderValue)
  case xGroup(value: OitiRemote.RequestHeaderValue)
  case xBranch(value: OitiRemote.RequestHeaderValue)
  case custom(key: Swift.String, value: OitiRemote.RequestHeaderValue)
}
extension OitiRemote.RequestHeader : Swift.Hashable {
  public static func == (lhs: OitiRemote.RequestHeader, rhs: OitiRemote.RequestHeader) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct NetworkResponse<T> {
  public let value: T
  public let statusCode: Swift.Int
}
public protocol NetworkProviderProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  func receiveDecodable<T>(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<T> where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func receiveData(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<Foundation.Data>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func request(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<Swift.Void>
  #endif
}
@_hasMissingDesignatedInitializers final public class NetworkProvider : OitiRemote.NetworkProviderProtocol {
  convenience public init()
  #if compiler(>=5.3) && $AsyncAwait
  final public func receiveDecodable<T>(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<T> where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func receiveData(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<Foundation.Data>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func request(with requestBuilder: OitiRemote.RequestBuilder) async throws -> OitiRemote.NetworkResponse<Swift.Void>
  #endif
  @objc deinit
}
public enum HttpMethod : Swift.String {
  case get, post, put, delete
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestHeaderValue {
  case applicationJson
  case applicationFormUrlEncoded
  case noCache
  case custom(Swift.String)
}
public enum Environment : Swift.String, Swift.CaseIterable {
  case hml
  case prd
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OitiRemote.Environment]
  public typealias RawValue = Swift.String
  public static var allCases: [OitiRemote.Environment] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CertifaceURLCategory : Swift.String, Swift.CaseIterable {
  case api
  case auth
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OitiRemote.CertifaceURLCategory]
  public typealias RawValue = Swift.String
  public static var allCases: [OitiRemote.CertifaceURLCategory] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum EnvironmentManager {
  public static func facecaptchaBaseUrl(from environment: OitiRemote.Environment) -> Swift.String
  public static func certifaceBaseUrl(from environment: OitiRemote.Environment, for category: OitiRemote.CertifaceURLCategory) -> Swift.String
}
public protocol ErrorConverterProtocol {
  func convert(_ error: any Swift.Error) -> OitiRemote.NetworkError
}
public class ErrorConverter : OitiRemote.ErrorConverterProtocol {
  public init()
  public func convert(_ error: any Swift.Error) -> OitiRemote.NetworkError
  @objc deinit
}
public class RequestBuilder {
  public init(baseUrl: Swift.String, endpoint: Swift.String)
  @discardableResult
  public func setMethod(_ httpMethod: OitiRemote.HttpMethod) -> Self
  @discardableResult
  public func addHeader(_ header: OitiRemote.RequestHeader) -> Self
  @discardableResult
  public func addBodyData(_ bodyData: Foundation.Data?) -> Self
  @objc deinit
}
public enum NetworkError : Swift.Error {
  case invalidUrl
  case invalidStatusCode
  case invalidResponse
  case wrongStatusCode(Swift.Int)
  case noResponseBody(statusCode: Swift.Int)
  case cannotParseResponse(statusCode: Swift.Int)
  case network(code: Foundation.URLError.Code)
  case unexpected(any Swift.Error)
}
extension OitiRemote.NetworkError : Swift.Equatable {
  public static func == (lhs: OitiRemote.NetworkError, rhs: OitiRemote.NetworkError) -> Swift.Bool
}
extension OitiRemote.HttpMethod : Swift.Equatable {}
extension OitiRemote.HttpMethod : Swift.Hashable {}
extension OitiRemote.HttpMethod : Swift.RawRepresentable {}
extension OitiRemote.Environment : Swift.Equatable {}
extension OitiRemote.Environment : Swift.Hashable {}
extension OitiRemote.Environment : Swift.RawRepresentable {}
extension OitiRemote.CertifaceURLCategory : Swift.Equatable {}
extension OitiRemote.CertifaceURLCategory : Swift.Hashable {}
extension OitiRemote.CertifaceURLCategory : Swift.RawRepresentable {}
